-- Data store in DATA File, In data file data store in PAGES
-- PAGES - The Smallest unit of data storage in the database having 8kb capacity

-- DATA Page
-- Index Page

-- HEAP = TABLE WITHOUT CLUSTERED INDEX (FULL TABLE SCAN)
 -- LEFT MOST PREFIX RULE
--INDEX WORK ONLY IF YOUR QUERY FILTER START FROM THE LEFT COLUMN IN THE INDEX AND FOLLOW ITS ORDER.


--INDEXES
--STRUCTURE                            STORAGE                                    fUNCTIONS
--CLUSTERED INDEX                      ROWSTORE INDEX                             UNIQUE INDEX
--NON CLUSTERED INDEX                  COLUMNSTOREINDEX                            FILTERED INDEX

--COLUMNSTOREINDEX - ROWGROUPS | COUMN SEGMENT | COMPRESSION | STORE(LARGE OBJECT PAGE (LOB))

ROW STORE INDEX - ORGANIZES AND STORES DATA ROW BY ROW
              , STORAGE EFFICIENCY -  (LESS EFFICIENT IN STORAGE)
            READ AND WRITE OPTIMIZATION - FAIR SPEED FOR READ AND WRITE OPERATIONS
            I/O EFFICIENCY - LOWER (RETRIEVES ALL COLUMNS )
            BEST FOR - OLTP (TRANSACTIONAL) COMMERCE,BANKING,FINANCIAL SYSTEMS, ORDER PROCESSING 
            USE CASE - HIGH FREQUENCY TRANSACTION APPLICATION
                       QUICK ACCESS TO COMPLETE RECORDS
COLUMN STORE INDEX - ORGANIZES AND STORES DATA COLUMN BY COLUMN
              , STORAGE EFFICIENCY --  HIGH EFFICIENT WITH COMPRESSION
            READ AND WRITE OPTIMIZATION -- FAST READ PERFORMANCE AND SLOW WRITE PERFORMANCE
            I/O EFFICIENCY - HIGHER (RETRIEVES SPECIFIC COLUMNS )
           BEST FOR - OLAP (ANALYTICAL) DATA WAREHOUSE, BUSINESS INTELLIGENCE, REPORTING, ANALYTICS
           USE CASE - BIG DATA ANALYTICS, SCANNING OF LARGE DATASET, FAST AGGREGATION 
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
--DROP INDEX
DROP INDEX [IDX_CUSTOMER_COUNTRY] ON SALES.CUSTOMER

--BY DEFAULT IT WILL TAKE NONCLUSTERED INDEX

CREATE NONCLUSTERED INDEX IDX_CUSTOMERSALESCOUNTRY ON SALES.DBO.CUSTOMER(COUNTRY)
CREATE CLUSTERED INDEX IDX_CUSTOMERSALESCUSTOMER ON SALES.DBO.CUSTOMER(CUSTOMERSID)

--BY DEFAULT IT WILL TAKE ROW STORE INDEX (THE ABOVE TWO ARE THE EXAMPLE OF ROW STORE INDEX)

-- SQL Server does not allow more than one columnstore index per table.
--FOR COLUMN STORE INDEX NEED TO MENTION COLUMN COLUMN STORE BUT NO KEY VALUES

CREATE NONCLUSTERED COLUMNSTORE INDEX IX_CUSTOMERS_COUNTRY ON SALES.CUSTOMERS (CUSTOMERS)
CREATE CLUSTERED COLUMNSTORE INDEX IX_CUSTOMERS_CUSTOMERSID ON SALES.CUSTOMERS <------- NOT ALLOWED TO USE COLUMNS

HEAP STRUCTURE 
EXAMPLE CONSUME 
DATA SPACE --9.633 MB
INDEX SPACE --0.008 MB

ROWSTORE STRUCTURE 
EXAMPLE CONSUME 
DATA SPACE --9.633 MB
INDEX SPACE --0.055 MB

COLUMNSTORE STRUCTURE 
EXAMPLE CONSUME 
DATA SPACE --1.461 MB
INDEX SPACE --0.000 MB 

QUERIES RELATED TO HEAP, ROWSTORE, COLUMNSTORE INDEX
use salesdb;

--HEAP EMPLOYEE TABLE
select * into FactSales_HEAP  
FROM [Sales].[Employees];

SELECT * FROM FactSales_HEAP;

DROP FactSales_HEAP;

--ROWSTORE EMPLOYEE TABLE
select * INTO  FactSales_RS
FROM [Sales].[Employees];

CREATE CLUSTERED INDEX IDX_FactSalesemp_RS on FactSales_RS (employeeid)

--COLUMNSTORE INDEX

select * INTO  FactSales_CS
FROM [Sales].[Employees];

CREATE CLUSTERED COLUMNSTORE INDEX IDX_FactSalesemp_CS on FactSales_CS 




           
